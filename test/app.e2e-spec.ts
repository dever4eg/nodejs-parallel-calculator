import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication, ValidationPipe } from '@nestjs/common';
import * as request from 'supertest';
import { EvaluationModule } from '../src/evaluation/evaluation.module';

describe('EvaluationModule (e2e)', () => {
  let app: INestApplication;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [EvaluationModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    app.useGlobalPipes(new ValidationPipe());

    await app.init();
  });

  afterAll(async () => {
    await app.close();
  });

  it('POST /evaluate', () => {
    return request(app.getHttpServer())
      .post('/evaluate')
      .send({
        expression: '(1-1 )*2+3 *( 1-3+4)+10/2',
      })
      .expect(200)
      .expect({
        result: 11,
      });
  }, 10000);

  it('POST /evaluate (medium size expression)', () => {
    return request(app.getHttpServer())
      .post('/evaluate')
      .send({
        expression:
          '(1-1 )*2+3 *( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)',
      })
      .expect(200)
      .expect({
        result: 25,
      });
  }, 10000);

  it('POST /evaluate (large size expression)', () => {
    return request(app.getHttpServer())
      .post('/evaluate')
      .send({
        expression:
          '((1-1 )*2+3 *( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4))*(( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4))+(10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4))+((1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4))*(( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)*( 1-3+4)+10/2+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4)+(1-3+4))',
      })
      .expect(200)
      .expect({
        result: 338830,
      });
  }, 10000);
});
